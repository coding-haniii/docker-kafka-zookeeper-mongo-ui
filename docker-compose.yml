#############################################################################
# @name.   docker-compose.yml
# @author. haeun kim
# @date.   2023-07-14
# @title.  Multi kafka and zookeeper topic clustering to mongodb
# @keywords. - kafka 
#            - zookeeper     
#            - mongodb
#            - docker
#############################################################################
# Summary containors and ports
#############################################################################
#
# *NODE
# 1.ZOOKEEPER         (3) zookeeper1:2181 | zookeeper2:2182 | zookeeper3:2183
# 2.KAFKA             (3) broker:9092  |  broker1:9091   | borker2:9092   
# 3.SCHEMA REGISTRY   (1) schemaregistry:8081
# 4.KSQL              (2) ksqlserver:8088, ksqlcli  
#---------------------------------------------------------------------------
# *DB 
# 5.MongoDB Replica   (3) mongo1:27015[M] | mongo2:27016[R1] | mongo3:27017[R2] | mongo4:27018[M] | mongo5:27019[R1]    
# 6.MongoDB Pool      (3) mongo-setup
#---------------------------------------------------------------------------
# *TRANSACTION
# 7.CONNECT               8083
# 8.CONTROL               9021
# 9.REST PROXY        (1) restproxy:8082
#---------------------------------------------------------------------------
# *OPTION
# 10.KAFKA -- UI      (4) topics:8000  
# 11.KAFAK TOPIC CREATE
# 12.NETWORKS         (2) localnet:bridge
# 13.VOLUMES
#############################################################################
# Ref. 
#############################################################################
# https://github.com/confluentinc/cp-demo/blob/7.4.0-post/docker-compose.yml
# https://github.com/mongodb/mongo-kafka/blob/master/docker/docker-compose.yml
# https://github.com/mongodb-university/kafka-edu.git
# https://github.com/provectus/kafka-ui
# https://docs.ksqldb.io/en/latest/reference/processing-log/
# https://stackoverflow.com/questions/64865361/docker-compose-create-kafka-topics
#
# restart option ->     restart: unless-stopped/always
# KAFKA_CREATE_TOPICS: "Topic1:2:3,Topic2:1:1"  --> Topic1 partition 2, replica 3 
# ZOOKEEPER_SSL_* --> search this options! for ssl
# KAFKA_ZOOKEEPER_SSL_* 
#
# Good luck!!! :D
#

version: "3.6"
services:
  #######################
  ### 1.ZOOKEEPER
  #######################
  zookeeper1:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - "2181:2181"
    volumes:
      - zoo1:/data
      - zoo1:/datalog
      - zoo1:/logs  
    networks:
      - localnet
    #networks:     
    #  broker-bridge:
    #    ipv4_address: 172.40.0.81      --You can initialize ip
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
      
  zookeeper2:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeper2
    container_name: zookeeper2
    ports:
      - "2182:2182"
    volumes:
      - zoo2:/data
      - zoo2:/datalog
      - zoo2:/logs 
    networks:
      - localnet
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: echo stat | nc localhost 2182
      interval: 10s
      timeout: 10s
      retries: 3

  zookeeper3:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeper3
    container_name: zookeeper3
    ports:
      - "2183:2183"
    volumes:
      - zoo3:/data
      - zoo3:/datalog
      - zoo3:/logs  
    networks:
      - localnet
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: echo stat | nc localhost 2183
      interval: 10s
      timeout: 10s
      retries: 3

  #######################
  ### 2.KAFKA
  #######################
  broker1:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker1
    container_name: broker1
    ports:
      - "29091:9091"
    healthcheck:
      interval: 10s
      retries: 25
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    networks:
      - localnet
    environment:
      PORT: 9091
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_LISTENERS: INSIDE://broker1:9092,OUTSIDE://localhost:29091
      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker1:9092,OUTSIDE://localhost:29091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  broker2:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker2
    container_name: broker2
    ports:
      - "29092:9092"
    healthcheck:
      interval: 10s
      retries: 25
    depends_on:
      - broker1
    networks:
      - localnet
    environment:
      PORT: 9092
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_LISTENERS: INSIDE://broker2:9092,OUTSIDE://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker2:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  broker:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker
    container_name: broker
    ports:
      - "29093:9092"
    healthcheck:
      interval: 10s
      retries: 25
    depends_on:
      - broker2
    networks:
      - localnet
    environment:
      PORT: 9092
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_LISTENERS: INSIDE://broker:9092,OUTSIDE://localhost:29093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:9092,OUTSIDE://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    
  #######################
  ### 3.SCHEMA REGISTRY
  #######################     
  schemaregistry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schemaregistry
    container_name: schemaregistry
    ports:
      - "8081:8081"
    depends_on:
      - broker1
      - broker2 
      - broker
      - zookeeper1
    networks:
      - localnet
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:9092,broker2:9092,broker:9092'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "http://zookeeper1:2181"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  #######################
  ### 4.KSQL
  ####################### 
  ksqlserver:
    image: confluentinc/cp-ksql-server:5.3.0   #ksqldb-server:0.23.1
    hostname: ksqlserver
    container_name: ksqlserver
    depends_on:
      - broker1
      - broker2 
      - broker
      - connect
      - schemaregistry
    ports:
      - "8088:8088"
    networks:
      - localnet
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: 'broker1:29091,broker2:29092,broker:9092'
      KSQL_HOST_NAME: ksqlserver
      KSQL_APPLICATION_ID: "cp-all-in-one"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: ksql_standalone_1
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schemaregistry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksqlcli:
    image: confluentinc/cp-ksql-cli:5.3.0   #ksqldb-cli:0.23.1
    container_name: ksqlcli
    depends_on:
      - broker1
      - broker2
      - broker
      - ksqlserver
    entrypoint: /bin/sh
    tty: true

  #######################
  ### 5.MongoDB Replica
  #######################
  mongo1:
    image: "mongodb-kafka-base-mongod:1.0" #"mongo:4.0-xenial"
    build:
      context: .
      dockerfile: mongo.Dockerfile
    container_name: mongo1
    command: --replSet rs0 --oplogSize 128
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - broker
      - connect
    volumes:
      - /home/ec2-user/kafka-logs/mongod1:/data/db
      #- ./data/db/replica/mongo3:/data/db
      #- ./mongodb.key:/etc/mongodb.key
    networks:
      - localnet
    ports:
      - "27017:27017"
    restart: always
    #environment:
    #  MONGO_INITDB_ROOT_USERNAME: root
    #  MONGO_INITDB_ROOT_PASSWORD: root!
    #  MONGO_INITDB_DATABASE: databaseName
    #restart: no

  #######################
  ### 6.MongoDB Pool
  #######################
  mongo-setup:
    image: "mongodb-kafka-base-setup-mongod:1.0"
    container_name: mongo-setup
    build:
      context: .
      dockerfile: mongo.Dockerfile
    depends_on:
      - mongo1
    networks:
      - localnet
    #volumes:
    #  - ./scripts:/scripts
    #entrypoint: [ "/scripts/setup_init.sh" ]      
    entrypoint:
      [
        "bash",
        "-c",
        "sleep 10 && mongosh --host mongo1:27017 config-replica.js && sleep 10",
      ]
    restart: "always"

  #######################
  ### 7.CONNECT
  #######################  
  connect:
    image: confluentinc/kafka-connect-datagen:latest
    build:
      context: .
      dockerfile: connect.Dockerfile
    ports:
      - "8083:8083"
    healthcheck:
      interval: 10s
      retries: 25
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - broker1
      - broker2 
      - broker
      - schemaregistry
    networks:
      - localnet
    environment:
      #KAFKA_JMX_PORT: 8083
      #KAFKA_JMX_HOSTNAME: localhost
      CONNECT_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9092,broker:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083

      CONNECT_GROUP_ID: cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
            
      
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,com.mongodb.kafka=DEBUG"
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
      
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      
      # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.3.0 Connect image
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"      
      
      
    command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"
    volumes:
      - ../build/confluent/kafka-connect-mongodb:/usr/share/confluent-hub-components/kafka-connect-mongodb
      

  #######################
  ### 8.CONTROL
  ####################### 
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper1
      - broker1
      - broker2 
      - broker
      - schemaregistry
      - connect
      - ksqlserver
    ports:
      - "9021:9021"
    networks:
      - localnet
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9092,broker:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper1:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_URL: "http://ksqlserver:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schemaregistry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1       
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9092,broker:9092"
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: 'zookeeper1:2181'
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      PORT: 9021
      

  #######################
  ### 9.REST PROXY
  #######################
  restproxy:
    image: confluentinc/cp-kafka-rest:7.2.2
    depends_on:
      - broker1  
      - broker2 
      - broker
      - schemaregistry
    hostname: restproxy
    container_name: restproxy
    ports:
      - "8082:8082"
    networks:
      - localnet
    environment:
      PORT: 8082
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9092,broker:9092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schemaregistry:8081"
      
  #######################
  ### 10.KAFKA -- UI
  #######################
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    networks:
      - localnet
    environment:
      KAFKA_REST_PROXY_URL: "http://restproxy:8082/"
      PROXY: "true"   
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - broker1
      - broker2
      - broker
      - schemaregistry
      - restproxy
      - connect

  #######################
  ### 11.KAFAK TOPIC CREATE
  #######################
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - broker1
      - broker2
      - broker
      - schemaregistry
      - restproxy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      sudo docker-compose exec broker kafka-topics --bootstrap-server broker:2092 --list

      echo -e 'Creating kafka topics'
      sudo docker-compose exec broker kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1
      sudo docker-compose exec broker kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic my-topic-2 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      sudo docker-compose exec broker kafka-topics --bootstrap-server broker:9092 --list
      "

  #######################
  ### 12.NETWORKS   
  #######################
networks:
  localnet:
    driver: bridge
    attachable: true
    #external: true
    ipam:
      config:
        - subnet: 172.40.0.0/24
          #IPAddress: "172.40.0.2"
          #gateway: 172.40.0.1

  #######################
  ### 13.VOLUMES   /home/ec2-user/kafka-logs
  #######################
volumes:
  mongod1:
  mongod2:
  mongod3:
  zoo1:
  zoo2:
  zoo3:
  kafka1:
  kafka2:
  kafka3:
