#############################################################################
# @name.   docker-compose.yml
# @author. haeun kim
# @date.   2023-07-14
# @title.  Multi kafka and zookeeper topic clustering to mongodb
# @keywords. - kafka 
#            - zookeeper     
#            - mongodb
#            - docker
#############################################################################
# Summary containors and ports
#############################################################################
#
# *NODE
# 1.ZOOKEEPER         (3) zoo1:2181 | zoo2:2182 
# 2.KAFKA             (3) broker1:29091  |  broker2:29092     
# 3.SCHEMA REGISTRY   (1) schemaregistry:8081
# 4.KSQL              (2) ksqlserver:8088, ksqlcli  
#---------------------------------------------------------------------------
# *DB 
# 5.MongoDB Replica   (3) mongo1:27017[M] | mongo2:27018[R1] | mongo3:27019[R2]  
# 6.MongoDB Pool      (3) mongo1-setup
#---------------------------------------------------------------------------
# *TRANSACTION
# 7.CONNECT               8083
# 8.CONTROL               9021
# 9.REST PROXY        (1) restproxy:8082
#---------------------------------------------------------------------------
# *OPTION
# 10.KAFKA -- UI      (4) topics:8000  
# 11.KAFAK TOPIC CREATE
# 12.NETWORKS         (2) localnet:bridge
# 13.VOLUMES
#############################################################################
# Ref. 
#############################################################################
# https://github.com/confluentinc/cp-demo/blob/7.4.0-post/docker-compose.yml
# https://github.com/mongodb/mongo-kafka/blob/master/docker/docker-compose.yml
# https://github.com/mongodb-university/kafka-edu.git
# https://github.com/provectus/kafka-ui
# https://docs.ksqldb.io/en/latest/reference/processing-log/
# https://stackoverflow.com/questions/64865361/docker-compose-create-kafka-topics
#
# restart option ->     restart: unless-stopped/always
# KAFKA_CREATE_TOPICS: "Topic1:2:3,Topic2:1:1"  --> Topic1 partition 2, replica 3 
# ZOOKEEPER_SSL_* --> search this options! for ssl
# KAFKA_ZOOKEEPER_SSL_* 
#
# Good luck!!! :D
#

version: "3.6"
services:
  #######################
  ### 1.ZOOKEEPER
  #######################
  zoo1:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zoo1
    container_name: zoo1
    networks:
      - localnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  zoo2:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zoo2
    container_name: zoo2
    networks:
      - localnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000

  broker1:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker1
    container_name: broker1
    ports:
      #- "19091"
      - "29091:9092"
      - "9991"
    depends_on:
      - zoo1
    networks:
      - localnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_LISTENERS: LISTENER_1://broker1:29091,LISTENER_2://broker1:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_1://broker1:29091,LISTENER_2://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_1:PLAINTEXT,LISTENER_2:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=broker1 -Dcom.sun.management.jmxremote.rmi.port=9991"
      JMX_PORT: 9991

  broker2:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker2
    container_name: broker2
    ports:
      - "29092:9092"
    depends_on:
      - zoo2
    networks:
      - localnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zoo2:2182"
      KAFKA_LISTENERS: LISTENER_1://broker2:29092,LISTENER_2://broker2:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_1://broker2:29092,LISTENER_2://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_1:PLAINTEXT,LISTENER_2:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  #######################
  ### 4.KSQL
  ####################### 
  ksqlserver:
    image: confluentinc/cp-ksql-server:5.3.0   #ksqldb-server:0.23.1
    hostname: ksqlserver
    container_name: ksqlserver
    depends_on:
      - broker1
      - broker2 
      - connect
      - schema-registry
    ports:
      - "8088:8088"
    networks:
      - localnet
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: 'broker1:29091,broker2:29092'
      KSQL_HOST_NAME: ksqlserver
      KSQL_APPLICATION_ID: "cp-all-in-one"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: ksql_standalone_1
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksqlcli:
    image: confluentinc/cp-ksql-cli:5.3.0   #ksqldb-cli:0.23.1
    container_name: ksqlcli
    depends_on:
      - broker1
      - broker2
      - ksqlserver
    entrypoint: /bin/sh
    tty: true
    
  connect:
    build:
      context: .
      dockerfile: connect.Dockerfile
    ports:
      - "35000:35000"      
      - "8083:8083"
    hostname: connect
    container_name: connect
    depends_on:
      - broker1
      - broker2
      - zoo1
    networks:
      - localnet
    environment:
      KAFKA_JMX_PORT: 35000
      KAFKA_JMX_HOSTNAME: localhost
      CONNECT_BOOTSTRAP_SERVERS: "broker1:29091,broker2:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zoo1:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.2.2
    ports:
      - "8082:8082"   
    depends_on:
      - zoo1
      - broker1
      - broker2
      - schema-registry
    hostname: rest-proxy
    container_name: rest-proxy
    networks:
      - localnet
    environment:
      PORT: 8082
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "broker1:29091,broker2:29092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker1
      - broker2
      - zoo1
      - zoo2
    networks:
      - localnet
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker1:29091,broker2:29092"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zoo1:2181"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  mongo1:
    image: "mongo:4.0-xenial"
    container_name: mongo1
    build:
      context: .
      dockerfile: mongo.Dockerfile
    command: --replSet rs0 --oplogSize 128
    networks:
      - localnet
    ports:
      - "27017:27017"
    restart: always
  mongo2:
    image: "mongo:4.0-xenial"
    container_name: mongo2
    build:
      context: .
      dockerfile: mongo.Dockerfile
    command: --replSet rs0 --oplogSize 128
    networks:
      - localnet
    ports:
      - "27018:27017"
    restart: always
  mongo3:
    image: "mongo:4.0-xenial"
    container_name: mongo3
    build:
      context: .
      dockerfile: mongo.Dockerfile
    command: --replSet rs0 --oplogSize 128
    networks:
      - localnet
    ports:
      - "27019:27017"
    restart: always


  mongo1-setup:
    image: "mongodb-kafka-base-setup-mongod:1.0"
    container_name: mongo1-setup
    build:
      context: .
      dockerfile: mongo.Dockerfile
    depends_on:
      - mongo1
    networks:
      - localnet
    entrypoint:
      [
        "bash",
        "-c",
        "sleep 10 && mongosh --host mongo1:27017 config-replica.js && sleep 10",
      ]
    restart: "no"


  #######################
  ### 8.CONTROL
  ####################### 
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zoo1
      - broker1
      - broker2 
      - schema-registry
      - connect
      - ksqlserver
    ports:
      - "9021:9021"
    networks:
      - localnet
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker1:29091,broker2:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zoo1:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_URL: "http://ksqlserver:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://0.0.0.0:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1       
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker1:29091,broker2:29092"
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: 'zoo1:2181'
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      PORT: 9021
      
  #######################
  ### 10.KAFKA -- UI
  #######################
  kafka-ui-topics:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka-ui-topics
    ports:
      - "8000:8000"
    networks:
      - localnet
    environment:
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zoo1
      - zoo2
      - broker1
      - broker2
      - schema-registry
      - rest-proxy


networks:
  localnet:
    driver: bridge
    #attachable: true
